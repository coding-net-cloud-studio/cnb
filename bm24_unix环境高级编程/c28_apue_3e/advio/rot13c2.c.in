// rot13c2.c.in
#include "apue.h"
#include <ctype.h>
#include <fcntl.h>
#include <aio.h>
#include <errno.h>

#define BSZ 4096
#define NBUF 8

// 定义读写操作的枚举类型
enum rwop {
	UNUSED = 0,       // 缓冲区未使用
	READ_PENDING = 1, // 缓冲区待读
	WRITE_PENDING = 2 // 缓冲区待写
};

// 定义缓冲区结构体
struct buf {
	enum rwop     op;          // 当前操作类型
	int           last;        // 是否是最后一次读取
	struct aiocb  aiocb;       // 异步I/O控制块
	unsigned char data[BSZ];   // 数据缓冲区
};

struct buf bufs[NBUF]; // 缓冲区数组

// 翻译函数，实现rot13加密
unsigned char
translate(unsigned char c)
{
	/* same as before */
}

int
main(int argc, char* argv[])
{
	int                 ifd, ofd, i, j, n, err, numop;
	struct stat         sbuf;
	const struct aiocb  *aiolist[NBUF];
	off_t               off = 0;

	// 检查命令行参数
	if (argc != 3)
		err_quit("usage: rot13 infile outfile");
	// 打开输入文件
	if ((ifd = open(argv[1], O_RDONLY)) < 0)
		err_sys("can't open %s", argv[1]);
	// 创建输出文件
	if ((ofd = open(argv[2], O_RDWR|O_CREAT|O_TRUNC, FILE_MODE)) < 0)
		err_sys("can't create %s", argv[2]);
	// 获取输入文件的状态
	if (fstat(ifd, &sbuf) < 0)
		err_sys("fstat failed");

	// 初始化缓冲区
	for (i = 0; i < NBUF; i++) {
		bufs[i].op = UNUSED;
		bufs[i].aiocb.aio_buf = bufs[i].data;
		bufs[i].aiocb.aio_sigevent.sigev_notify = SIGEV_NONE;
		aiolist[i] = NULL;
	}

	numop = 0;
	for (;;) {
		// 遍历缓冲区数组
		for (i = 0; i < NBUF; i++) {
			switch (bufs[i].op) {
			case UNUSED:
				// 如果还有未读数据，则从输入文件读取
				if (off < sbuf.st_size) {
					bufs[i].op = READ_PENDING;
					bufs[i].aiocb.aio_fildes = ifd;
					bufs[i].aiocb.aio_offset = off;
					off += BSZ;
					if (off >= sbuf.st_size)
						bufs[i].last = 1;
					bufs[i].aiocb.aio_nbytes = BSZ;
					if (aio_read(&bufs[i].aiocb) < 0)
						err_sys("aio_read failed");
					aiolist[i] = &bufs[i].aiocb;
					numop++;
				}
				break;

			case READ_PENDING:
				// 检查异步读取操作的状态
				if ((err = aio_error(&bufs[i].aiocb)) == EINPROGRESS)
					continue;
				if (err != 0) {
					if (err == -1)
						err_sys("aio_error failed");
					else
						err_exit(err, "read failed");
				}

				// 读取完成，翻译缓冲区内容并写入输出文件
				if ((n = aio_return(&bufs[i].aiocb)) < 0)
					err_sys("aio_return failed");
				if (n != BSZ && !bufs[i].last)
					err_quit("short read (%d/%d)", n, BSZ);
				for (j = 0; j < n; j++)
					bufs[i].data[j] = translate(bufs[i].data[j]);
				bufs[i].op = WRITE_PENDING;
				bufs[i].aiocb.aio_fildes = ofd;
				bufs[i].aiocb.aio_nbytes = n;
				if (aio_write(&bufs[i].aiocb) < 0)
					err_sys("aio_write failed");
				break;

			case WRITE_PENDING:
				// 检查异步写入操作的状态
				if ((err = aio_error(&bufs[i].aiocb)) == EINPROGRESS)
					continue;
				if (err != 0) {
					if (err == -1)
						err_sys("aio_error failed");
					else
						err_exit(err, "write failed");
				}

				// 写入完成，标记缓冲区为未使用
				if ((n = aio_return(&bufs[i].aiocb)) < 0)
					err_sys("aio_return failed");
				if (n != bufs[i].aiocb.aio_nbytes)
					err_quit("short write (%d/%d)", n, BSZ);
				aiolist[i] = NULL;
				bufs[i].op = UNUSED;
				numop--;
				break;
			}
		}
		// 如果没有待处理的操作，检查是否已经读取完所有数据
		if (numop == 0) {
			if (off >= sbuf.st_size)
				break;
		} else {
			// 等待至少一个异步操作完成
			if (aio_suspend(aiolist, NBUF, NULL) < 0)
				err_sys("aio_suspend failed");
		}
	}

	// 同步输出文件
	bufs[0].aiocb.aio_fildes = ofd;
	if (aio_fsync(O_SYNC, &bufs[0].aiocb) < 0)
		err_sys("aio_fsync failed");
	exit(0);
}
